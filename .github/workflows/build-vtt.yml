name: Build VTT

on:
  push:
    branches: [main]
    
env:
  CARGO_TERM_COLOR: always
  GODOT_VERSION: 3.3.4
  EXPORT_NAME: vtt-client

jobs:
  test:
    uses: /.github/workflows/unit-tests.yml
  build-server:
    needs: test
    strategy:
      matrix:
        build: 
          - name: ubuntu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - name: scratch
            target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - name: windows
            target: x86_64-pc-windows-msvc
            os: windows-latest
          - name: macos-intel
            target: x86_64-apple-darwin
            os: macos-11
    
    runs-on: ${{matrix.build.os}}

    steps:
      - uses: actions/checkout@v2
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: matrix.config.os == 'windows'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.config.os == 'windows'
      - run: rustup default stable
      - run: rustup target add ${{matrix.build.target}}
      - name: Build ${{matrix.build.name}}
        run: cargo build --verbose --release --target ${{matrix.build.target}}
        working-directory: server
      - uses: Swatinem/rust-cache@v1
      - name: Upload Server
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.build.name}}-server
          path: target/${{matrix.build.target}}/release/server*

  build-native-client:
    needs: test
    strategy:
      matrix:
        build: 
          - name: ubuntu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - name: windows
            target: x86_64-pc-windows-msvc
            os: windows-latest
          - name: macos-intel
            target: x86_64-apple-darwin
            os: macos-11
    
    runs-on: ${{matrix.build.os}}

    steps:
      - uses: actions/checkout@v2
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: matrix.config.os == 'windows-latest'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.config.os == 'windows-latest'
      - run: sudo apt-get update; sudo apt-get install -y pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
        if: matrix.build.os == 'ubuntu-latest'
      - run: rustup default stable
      - name: Build ${{matrix.build.name}}
        run: cargo build --verbose --release
        working-directory: client-bevy-native
      - uses: Swatinem/rust-cache@v1
      - name: Assemble files
        run: |
          mkdir build
          cp -r client-bevy-native/assets/ build/assets
          cp target/release/client-* build
      - name: Upload Client
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.build.name}}-client
          path: build
          

  build-web-client:
    needs: test
    strategy:
      matrix:
        build: 
          - name: html5
            target: wasm32-unknown-unknown
    
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - run: sudo apt-get update; sudo apt-get install -y pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - run: rustup default stable
      - run: rustup target add ${{matrix.build.target}}
      - run: cargo install wasm-pack
      - name: Build ${{matrix.build.name}}
        run: wasm-pack build --target web --debug -- --features web
        working-directory: client-bevy
      - uses: Swatinem/rust-cache@v1
      - name: Assemble files
        run: |
          mkdir build
          cp -r client-bevy-native/assets/ build/assets
          cp -r client-bevy/pkg/ build/pkg
          cp client-bevy/index.html build/
      - name: Upload Client
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.build.name}}-client
          path: build
  
  package-image:
    runs-on: ubuntu-latest
    needs: build-server

    permissions:
      contents: read
      packages: write

    env:
      REGISTRY: ${{ secrets.DOCKER_REGISTRY_ADDRESS }}
      IMAGE_NAME: ${{ github.repository }}-server

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: scratch-server
          path: ./docker-contents
      - name: Set Permissions
        run: chmod 777 ./docker-contents/server
      - name: Install doctl 
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to DO Container Registry 
        run: doctl registry login --expiry-seconds 600
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./scratch-server.dockerfile

  upload-html-client:
    runs-on: ubuntu-latest
    needs: build-web-client
    steps:
      - name: Checkout Static Site Branch
        uses: actions/checkout@v2
        with: 
          ref: static-site
      - name: Delete all current files
        run: rm -rf ./*
      - name: Download Build
        uses: actions/download-artifact@v2
        with:
          name: html5-client
      - name: List files
        run: ls -la
      - name: Remove Git Ignore
        run: rm ./pkg/.gitignore
      - name: Git Status
        run: git status
      - name: Stage
        run: git add *
      - name: Push Updates
        uses: actions-js/push@master
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          branch: static-site
